## General Naming Rules

Names should be descriptive; avoid abbreviation.

Give as descriptive a name as possible, within reason. Do not worry about saving horizontal space as it is far more important to make your code immediately understandable by a new reader. Do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word.

### Do
	int price_count_reader;    // No abbreviation.
	int num_errors;            // "num" is a widespread convention.
	int num_dns_connections;   // Most people know what "DNS" stands for.

### Don't Do
	int n;                     // Meaningless.
	int nerr;                  // Ambiguous abbreviation.
	int n_comp_conns;          // Ambiguous abbreviation.
	int wgc_connections;       // Only your group knows what this stands for.
	int pc_reader;             // Lots of things can be abbreviated "pc".
	int cstmr_id;              // Deletes internal letters.

Note that certain universally-known abbreviations are OK, such as i for an iteration variable and T for a template parameter.

Template parameters should follow the naming style for their category: type template parameters should follow the rules for type names, and non-type template parameters should follow the rules for variable names.

## File Names

Filenames should be descriptive and have underscores in substitution for space:
	my_useful_class.cpp  <- C++ source files
	my_useful_class.h    <- C++ header files
	my_useful_class.inc  <- C++ include files that are not headers (Use sparingly)

## Class/Struct/Type Names

We use 'PascalCase' for naming types

## Variables

The names for all the variables - local, class attributes, function args - are in 'lower_snake_case'.

## Class data members

All the class attributes are in lower snake case just like local variables, but to differentiate them from the rest
a trailing underscore is added to their name.

class Foo {
private:
	int class_member_;

public:
	void SomeFunction() {
		int local_variable;
	}
};

## Struct Data Members

Struct data members are just like local variables, they do not have trailing underscores.

## Constant Names

Constants should be defined in the UPPER_SNAKE_CASE.

const int DAYS_IN_A_WEEK = 4;


## Macros
Nooooo!! Do not use MACROS!! PLEASE!!..... But if you do then prefix it with 'MACRO_'.

#define MACRO_DEATH_WISH "0xDEADBEEF"

## Function Names

All function names are in PascalCase(). WooHooo!! C++....



Most of these rules are taken from the google's C++ guide: https://google.github.io/styleguide/cppguide.html
