# Flags used for g++, as, and ld
# respectively.
GPPPARAMS = -m32
ASPARAMS = --32
LDPARAMS = -melf_i386

objects = loader.o kernel.o

# This target explains how to
# create a .o file from a .cpp
# file. So running 'make foo.cpp'
# will run this command.
%.o: %.cpp
	g++ $(GPPPARAMS) -o $@ -c $<

# This file explains how to
# create a .o file from a .s
# file. So running 'make foo.s'
# will run this command.
%.o: %.s
	as $(ASPARAMS) -o $@ $<

# This target explains how to build mykernel.bin
# It says that linker.ld and the $(objects) are
# required for this command to run. So the make
# will first execute stuff to create those two files.
mykernel.bin: linker.ld $(objects)
	ld $(LDPARAMS) -T $< -o $@ $(objects)

# This target when run 'make install' will
# place the kernel executable to a folder
# which we'll later make grub access.
install: mykernel.bin
	sudo cp $< /boot/mykernel.bin




When designing this Operating System. We are not going to
write the bootloader. Instead we are going to design it so that it can
be loaded by a bootloader. In our case the bootloader that we have chosen
is called grub.

The bootloader will be loading the mykernel.bin file. This file is a merger
of two files loader.o and kernel.o, which are - you guessed it - by products of
loader.s and kernel.cpp.

The loader.s file contains the very first lines of code that will be executed
after the bootloader passes control to the kernel. The responsibility of loader.s
file is to setup the kernel stack and other things before loading the kernel.
One thing to note here is that in i386 architecture, the stack grows from higher
to lower addresses.

The kernel.cpp file is - what we'd like to think of as - the main entry for the kernel. The
function 'kernel_main' is called in loader.s

The binaries of these two files - loader.o and kernel.o - are going to be glued together by
the linker as per the instructions in linker.ld file. Therefore these two files might have
a bit of references back and forth. For example in loader.s we are importing the kernel_main
function by using ".extern kernel_main" 

MAGIC number and GRUB:
=====================
Grub has a kernel loading standard called multiboot. And according to this
standard, for a binary to qualify as a kernel it must include a magic number
which is '0x1badb002', along with it some FLAGS and a CHECKSUM must also be
included. So What we have done is we have defined MAGIC, FLAGS, and CHECKSUM
and then put them inside a section that we have called 'multiboot'

THE multiboot struct:
====================
Before loading the kernel, and passing the control over to it. The grub
bootloader gather information about the system like its RAM size etc, and
puts it inside a multiboot struct in RAM. when passing control to the kernel
grub puts the address of this struct into the ax register, and puts the magic number
in the bx register - don't ask me.. I don't know why it puts the magic number there.. :\


SYNOPSIS:
========
If you now try to run 'make loader.o' it will succeed
but if you try running 'make kernel.o' it will give you an
error saying 'printf' was not found.


PRINTF
=====
You mut have had a feeling that using printf is a crazy idea. Because that is a functionality
is provided by libc, the standard 'C' library. Exactly and that comes along the other goodies
that the OS provides to a program running in the user space.....

WELL WE SHOULD WAKE UP!!! Because this is not the user space, we are inside the kernel, and that
too we are at the very beginning of the kernel loading process. But there is a way of printing
text to the screen in this mode.

In protected mode, the special addresses 0xb0000 and 0xb8000 mark the start of video memory for monochrome
and color monitors respectively. For our example we'll by using the video memory for the color monitors.
It works in the following way:
	1) The color video memory is an array of elements where each element is
	of two bytes.
	2) The first byte in each element defines the color of the character, such that
	the first 4 bits represent the foreground color, and the last 4 bits represent the
	background color. By default the background color is black, and the foreground is white.
	3) The scond byte is the ASCII code for the character that you want to put out on
	the screen.
	4) So, by simply writing to this memory you can change the contents of the screen.

COMPILER FLAGS:
==============
The executable that will be generated at the end must be self-sufficient. And in order to make it that
way we must pass some flags to the compiler to disable pulling in stuff from the eco-system on which the
kernel is being compiled. Following flags have been passed to the G++ compiler:
-fno-use-cxa-atexit: This has something todo with memory management.
-nostdlib: no libc support.
-fno-builtin: Don't recognize built-in functions read more at: https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#C-Dialect-Options
-fno-rtti: No run-time type identification.
-fno-exceptions: No exception mechanisims
-fno-leading-underscore: Don't append leading underscores to symbols in the generated object code.


LINKER.LD file:
==============
The linker.ld file is used to tell the linker how to merge some object files together. In this file
we specify how different sections from different object files will come together to for a final binar file.
We usually use this way of linking things whenever we are linking things that are compiled from different languages,
in our case we are joining loader.o and kernel.o which have been written in assembly and C++ respectively.

The extern "C" in kernel_main:
=============================
You must have wondered why is 'kernel_main' prefixed by 'extern "C"'. Well, that is very important todo, and it has
something to do with how g++ renames the symbols when producing the '.o' files. In C++ functions can have overloads,
so in order to use a symbol that is unique the C++ compiler mangles the function name by adding information about arguments.
And since the C linkers, expect non-mangled names the object file produced by C++ compilers are unlinkable to C-like object
files. So we use 'extern "C"' which is a linkage specification that tells the C++ compiler to not mangle the function name.


start_ctors and end_ctors:
=========================
	So, we are writing our kernel in C++, the father of all OO langs. We have a slight problem that can prevent us from using static or global
objects in the future. The problem with doing that is that in kernel space, all the constructors of static objects are called before calling
the main function. We need to do the same but before kernel_main. Not to worry though, because we have half the things set already in linker.ld
if you look closely you will find the following snippet:
	.data :
	{
		start_ctors = .;
		KEEP(*( .init_array ));
		KEEP(*(SORT_BY_INIT_PRIORITY( .init_array.* )));
		end_ctors = .;

		*(.data)
	}
What this does is that its defining the .data section - this section typically holds initialized data. And here we have defined two symbols start_ctors and
end_ctors that sandwitch between themselves an array 'init_array' which is generated by g++ and holds the function pointers of constructors that need
static initialization.

Now what we do is we define these symbols in our C++ code, and write code for calling all the constructors in the init_array list. We then export
the function - that contains the code to call all constructors - to the loader.s file and call it before kernel_main... Bingo!!

The mykernel.iso target:
=======================
	It will be nasty to test the kernel manually, by rebooting our machine everytime. To avoid this problem we will convert the kernel image
and make an iso file out of it so that we can boot a VM like VirtualBox or QEMU from it. Doing that is simple. We create a folder 'iso' having the following 
directory structure:
	iso/
	|
	|-------boot/
		|
		|-------mykernel.bin
		|
		|-------grub/
			|
			|-------grub.cfg

the 'grub.cfg' file will have the following content:
	# no timeout for user input
	set timeout=0
	# default menu entry is 0, we only have one menu entry
	set default=0

	menuentry "MYOS" {
	    multiboot /boot/mykernel.bin
	    boot
	}

After this we'll have to run the following command to make the kernel iso, PROVIDED WE HAVE INSTALLED xorriso by running 'sudo apt-get install xorriso':
	grub-mkrescue --output=mykernel.iso iso
And we'll have our iso image ready!!!

Thanks to Makefile, we will not have to do this again and again, we'll simply run 'make mykernel.iso' and all of this will happen automatically.


STRUCT_PADDING:
==============
	When we declare a struct or a class in C/C++ the gcc compiler will add padding between its elements to align the data inside for fast retrieval.
But when we are working with structs that are sensitive to such changes - that need to be defined perfectly down to each byte - we disable struct
padding by using __attribute__((packed)) syntax that is provided by gcc.
